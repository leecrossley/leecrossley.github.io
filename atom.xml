<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iLee]]></title>
  <subtitle><![CDATA[I write code that sounds awesome and music that's bug free]]></subtitle>
  <link href="http://ilee.co.uk/atom.xml" rel="self"/>
  <link href="http://ilee.co.uk"/>
  <updated>2014-05-07T16:47:51.745Z</updated>
  <id>http://ilee.co.uk/</id>
  <author>
    <name><![CDATA[Lee Crossley]]></name>
    <email><![CDATA[leee@hotmail.co.uk]]></email>
  </author>
  <entry>
    <title type="html"><![CDATA[Adds - Addition Puzzle Game]]></title>
    <link href="http://ilee.co.uk/adds-addition-puzzle-game/"/>
    <id>http://ilee.co.uk/adds-addition-puzzle-game/</id>
    <published>2014-05-07T13:34:22.000Z</published>
    <updated>2014-05-07T16:47:47.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://playadds.com" target="_blank">Adds</a> is a simple mobile and tablet game, created my myself with Cordova / PhoneGap. It’s been several months in development and I have been sharing most of my experiences as I’ve been going along, but I think it’s time to <em>sum up</em>.</p>
<p>Yesterday, I finally released version 1. The app landing (promo) page can be found <a href="[Adds](http://playadds.com">here</a>.</p>
<p><img src="http://playadds.com/images/iphone.png" alt="iPhone teaser"></p>
<h2 id="The_concept">The concept</h2>
<p>To play, you swipe over numbers in a grid to add up to a total at the top. It’s very easy to play, but difficult to master.</p>
<p>You can swipe in any combination of directions (up, down, left or right) but you can’t go back on yourself (use the same number twice) or move diagonally.</p>
<p>It was tricky to implement the main game grid in JavaScript (especially with the touch interactions) but now, it’s exceptionally stable, testable and portable. I wrote about some of the early logic <a href="http://ilee.co.uk/get-adjacent-squares-on-a-grid/">here</a> last November.</p>
<h2 id="The_game">The game</h2>
<p>The game is broken up into 3 main sections:</p>
<h3 id="1-_Endless_play">1. Endless play</h3>
<p>This is where players battle it out to reach the highest score and the sky is the limit! The core concept is that you start off with 10 seconds on the clock and for each number in your answer, you gain a point and an extra second.</p>
<p>There are 3 different difficulty modes available for selection, Easy, Medium and Hard. You must score 50 or more in Easy mode to unlock Medium and 50 or more in Medium to unlock Hard. There are no in app purchases to shortcut this. The difference between these difficulties is the grid size. Easy is a 3x3 grid, Medium 4x4 and Hard 5x5.</p>
<p>What people might not realise about the endless mode is that all the difficulties do get progressively harder (every 50 points you score to be exact). What I mean by harder this time is both the numbers in the grid and the totals get bigger.</p>
<p>The trick is to store up as much time right at the start and pass if it’s not immediately obvious.</p>
<h3 id="2-_Levels">2. Levels</h3>
<p>There are currently 15 unique levels. 5 branded “Cadet”, 5 branded “Lieutenant” and 5 branded “Captain”. All Cadet levels are on a 3x3 grid, Lieutenant 4x4 and Captain 5x5.</p>
<p>Each level has it’s own “theme”, such as only odd numbers on the grid or even negative numbers… but I don’t want to spoil too much for you :)</p>
<p>The levels start off easy and get progressively harder. 3-5 (the fifth Captain level) is exceptionally hard and I have only completed it once myself! Although you will be satisfied with the gratification of beating level 3-5, you are also rewarded by having the time trial mode unlocked for free.</p>
<h3 id="3-_Time_trial_mode">3. Time trial mode</h3>
<p>Accessible after completion of all 15 levels, or via in app purchase, time trial mode does exactly what it says on the tin. Choose your grid size (3x3, 4x4, 5x5) and your duration (90s or 180s) and you’re off.</p>
<h2 id="Hints_and_tips">Hints and tips</h2>
<ul>
<li><p><strong>Remember to pass</strong>. Don’t waste time if a solution isn’t immediately obvious. You do lose a point for passing, but it’s worth it in time gained. There’s also a “Gold Pass” in app purchase that allows you to pass without ever losing a point.</p>
</li>
<li><p><strong>Use the smallest numbers</strong>. You get a point for every number in your answer, so it makes sense to use the longest answer (most numbers).</p>
</li>
<li><p><strong>Don’t guess</strong>. Five wrong guesses in a row will lose you 5 points. Epic fail.</p>
</li>
</ul>
<h2 id="Leaderboards">Leaderboards</h2>
<p>There’s a leaderboard for everything. I didn’t want simply passing a level to be enough, I wanted players to complete to see how fast they could complete a level. Thanks to my <a href="http://ilee.co.uk/using-game-center-with-phonegap/">game center plugin</a> friends and family can compare scores and times. They can also battle against everyone else in the world.</p>
<h2 id="Platforms">Platforms</h2>
<p>The game is currently optimised for iOS 7 devices (iPhone, iPod touch and iPad). Thanks to Cordova / PhoneGap and the way I have developed it, it’s considerably easier to port to other platforms, such as Android and WP8. This is currently a work in progress dependant on demand.</p>
<h3 id="Device_sizes">Device sizes</h3>
<p>There were several different screen sizes to consider while developing the interface, such as the shorter iPhone 4 screen (320×480 or 640×960 retina), the taller iPhone 5 resolution (640×1136) and of course the various iPads. I wanted to ensure I used exactly the same code for each.</p>
<p>By utilising clever media queries and base font sizes, I was able to adjust sizes relatively easily keeping the same game play. Still had to create the million splash screens and icons though :). Essentially, the numbers grid is</p>
<h2 id="Plugins">Plugins</h2>
<p>Naturally, I’ve had to use/write some Cordova plugins to achieve the games required functionality, here’s a list (excluding any core plugins):</p>
<ul>
<li><a href="https://github.com/leecrossley/cordova-plugin-game-center" target="_blank">Game Center</a></li>
<li><a href="https://github.com/leecrossley/cordova-plugin-native-transitions" target="_blank">Native Transitions</a></li>
<li><a href="https://github.com/leecrossley/cordova-plugin-social-message" target="_blank">Social Message</a></li>
<li>In App Purchase</li>
<li>Google Analytics</li>
<li>Status Bar</li>
</ul>
<h2 id="Frameworks">Frameworks</h2>
<p>None. No CSS/UI frameworks. No JavaScript frameworks.</p>
<p>I refuse to use frameworks, it’s the best way to create a fluid, light weight, performant app.</p>
<h2 id="Number_puzzle_games">Number puzzle games</h2>
<p>There has been a increase in number based puzzle games recently, such as “Threes” and “2048”.</p>
<p>I actually started the development for <a href="https://itunes.apple.com/gb/app/adds/id742044838" target="_blank">Adds</a> back in October 2013 and I’m hoping to follow in similar footsteps to other number games released during my development. I do believe that my app is unique in its approach and not just another “numbers on a grid” game.</p>
<h2 id="Final_notes">Final notes</h2>
<p>I hope you enjoy my little game and become an add-ict too. I can now add like a boss.</p>
<p>If you’re a developer and want a free promo code because you don’t want to pay the 69p, I have a couple left - DM me on twitter.</p>
<p>Please send your feedback to me, it’s the only way I can improve, even if I bite your head off and go defensive :)</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/app/" term="app"/>
    <category scheme="http://ilee.co.uk/tags/phonegap/" term="phonegap"/>
    <category scheme="http://ilee.co.uk/tags/design/" term="design"/>
    <category scheme="http://ilee.co.uk/tags/iphone/" term="iphone"/>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
    <category scheme="http://ilee.co.uk/tags/html/" term="html"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[CSS translate3d Performance Hack]]></title>
    <link href="http://ilee.co.uk/css-translate3d-performance-hack/"/>
    <id>http://ilee.co.uk/css-translate3d-performance-hack/</id>
    <published>2014-04-28T07:10:13.000Z</published>
    <updated>2014-04-28T07:58:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="CSS_transition_performance">CSS transition performance</h2>
<p>When I started out developing apps with Cordova / PhoneGap, there were several performance hacks I used to help CSS animations become smoother, i.e. force GPU acceleration.</p>
<h3 id="The_CSS_transform_hacks">The CSS transform hacks</h3>
<p>Depending on the scenario, I’d usually adopt one of the following (and I’d be careful about which elements they were applied to):</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="class">.class</span> <span class="rules">{
    <span class="rule"><span class="attribute">-webkit-backface-visibility</span>:<span class="value"> hidden</span></span>;
    <span class="rule"><span class="attribute">-webkit-perspective</span>:<span class="value"> <span class="number">1000</span></span></span>;

    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span></span>;
    <span class="comment">/* or */</span>
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translateZ(<span class="number">0</span>)</span></span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>


<figure class="highlight css"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="class">.class</span> <span class="rules">{
    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">rotateZ(<span class="number">360</span>deg)</span></span></span>;
    <span class="comment">/* yep, this worked for me in the past! */</span>
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h3 id="Memory_allocation">Memory allocation</h3>
<p>These hacks were never a hard and fast rule, and as developers don’t have control over browser memory, it was easy to create memory issues.</p>
<h2 id="Beware">Beware</h2>
<p>After applying varies permutations of these hacks to a game I’m developing with Cordova / PhoneGap, it appears that even using the hacks sparingly and with caution, the performance of the transitions are degraded.</p>
<p>Transitions are jerkier than without the hacks and it hits the performance of the native code when used in parallel (e.g. <a href="https://github.com/leecrossley/cordova-plugin-native-transitions" target="_blank">native transitions</a>). It also forces font rendering to GPU control instead of the operating system rendering scheme, making text appear slightly pixellated on occasion.</p>
<h3 id="Conclusion">Conclusion</h3>
<p>In my opinion, with well developed apps and the latest browsers / hardware, these hacks are now redundant (and are likely to make things worse). The chances are, you probably don’t need to use them anymore.</p>
<p>To combat performance issues, you should look at other contributing factors, like the number of elements and use of intensive styles, such as box shadow.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
    <category scheme="http://ilee.co.uk/tags/phonegap/" term="phonegap"/>
    <category scheme="http://ilee.co.uk/tags/hack/" term="hack"/>
    <category scheme="http://ilee.co.uk/tags/iphone/" term="iphone"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[dotject Atom Text Editor Plugin]]></title>
    <link href="http://ilee.co.uk/dotject-atom-text-editor-plugin/"/>
    <id>http://ilee.co.uk/dotject-atom-text-editor-plugin/</id>
    <published>2014-04-23T07:08:24.000Z</published>
    <updated>2014-04-23T08:01:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="dotject">dotject</h2>
<p>After <a href="http://ilee.co.uk/dotject-quick-js-object-composition/">yesterday’s post</a> about <a href="https://github.com/leecrossley/dotject" target="_blank">dotject</a>, it quickly became apparent that although some people may find it useful, they wanted the dotject functionality to be part of an IDE. This was always my intention and it’s now available as an <a href="https://atom.io/packages/dotject" target="_blank">Atom plugin</a>.</p>
<h2 id="Atom">Atom</h2>
<p>Titled as “a hackable text editor for the 21st Century”, GitHub’s <a href="https://atom.io/" target="_blank">Atom</a> has created some controversy about being a <em>closed-source open-source</em> text editor (yes you read that right). Although the core isn’t open source, developers have the ability to develop plugins and themes to completely change or enhance the way the editor works.</p>
<h2 id="The_Plugin">The Plugin</h2>
<p>I found it easy to create an Atom plugin for dotject, mainly due to it’s familiarity with <a href="https://www.npmjs.org/" target="_blank">npm</a> (it also has a root package.json file etc). Under the hood, it even uses my dotject node package, so there’s no duplication of the dotject code whatsoever.</p>
<h3 id="Installation">Installation</h3>
<p>Use the Atom package manager, which can be found in the Settings view or run <code>apm install dotject</code> from the command line.</p>
<h3 id="Usage">Usage</h3>
<p>The default keymapping is <code>shift-cmd-J</code> (although this can be configured). You simply highlight your dotject string and press <code>shift-cmd-J</code> to perform the conversion.</p>
<h3 id="Example">Example</h3>
<p>Highlighting <code>a.b.c,d.e</code> then pressing <code>shift-cmd-J</code> will replace <code>a.b.c,d.e</code> with:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>{<span class="string">"a"</span>:{<span class="string">"b"</span>:{<span class="string">"c"</span>:{}}},<span class="string">"d"</span>:{<span class="string">"e"</span>:{}}}
</pre></td></tr></table></figure>

<h3 id="The_code">The code</h3>
<p>It’s essentially 2 lines of code, with a little glue and keymapping:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// convert the current text selection</span>
<span class="keyword">var</span> converted = dotject(editor.getSelection().getText());
<span class="comment">// insert the stringified json in place of the selection</span>
editor.getSelection().insertText(<span class="built_in">JSON</span>.stringify(converted));
</pre></td></tr></table></figure>

<p>This would all be perfect, if it was not for CoffeeScript (I’ve written in JavaScript above).</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[dotject - Quick JS Object Composition]]></title>
    <link href="http://ilee.co.uk/dotject-quick-js-object-composition/"/>
    <id>http://ilee.co.uk/dotject-quick-js-object-composition/</id>
    <published>2014-04-22T07:59:29.000Z</published>
    <updated>2014-04-22T08:25:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="dotject">dotject</h2>
<p><a href="https://github.com/leecrossley/dotject" target="_blank">dotject</a> provides a quick and simple way to compose JavaScript objects using familiar <a href="http://www.ling.helsinki.fi/kit/2009s/clt230/RUR-PLE/html/en/inter/30-dot.htm" target="_blank">dot notation</a>.</p>
<p>The code supports object creation at n levels (nesting) along with same level objects. There’s also functionality to support (multiple) value assignment and value overriding. It might sound complicated but it’s designed to make life easier, the examples below will showcase this.</p>
<p>dotject harnesses the power of <a href="https://github.com/leecrossley/functional-js" target="_blank">functional.js</a> and it’s λ.reduce function to achieve the “dot notation to object” implementation in very few lines of code.</p>
<h2 id="Getting_started">Getting started</h2>
<p>Install via npm:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm <span class="keyword">install</span> dotject <span class="comment"># --save</span>
</pre></td></tr></table></figure>

<p>Require the module in the usual way:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">var</span> dotject = <span class="built_in">require</span>(<span class="string">"dotject"</span>);
</pre></td></tr></table></figure>

<h2 id="Using_dotject">Using dotject</h2>
<p>There is a comprehensive list of programatic examples in the <a href="https://raw.githubusercontent.com/leecrossley/dotject/master/dotject-spec.js" target="_blank">specs</a>, for the project, but I’ll run through examples here:</p>
<h3 id="Simple_object_composition">Simple object composition</h3>
<p>Separating property names with dots (like JavaScript dot notation) will create nested objects:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>dotject(<span class="string">"a.b.c"</span>);

{
  <span class="string">"a"</span>: {
    <span class="string">"b"</span>: {
      <span class="string">"c"</span>: {}
    }
  }
}
</pre></td></tr></table></figure>

<p>Separating property names with a comma (similar to JavaScript objects) will create properties at the same level:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>dotject(<span class="string">"a,b"</span>);

{
  <span class="string">"a"</span>: {},
  <span class="string">"b"</span>: {}
}
</pre></td></tr></table></figure>

<p>This notation can be combined with the dot style notation:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>dotject(<span class="string">"a,b.c"</span>);

{
  <span class="string">"a"</span>: {},
  <span class="string">"b"</span>: {
    <span class="string">"c"</span>: {}
  }
}
</pre></td></tr></table></figure>

<h3 id="Extend_an_existing_object">Extend an existing object</h3>
<p>Extend an existing object with new properties by passing the existing object as a second (optional) argument:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>dotject(<span class="string">"b.c"</span>, {<span class="string">"a"</span>:{}});

{
  <span class="string">"a"</span>: {},
  <span class="string">"b"</span>: {
    <span class="string">"c"</span>: {}
  }
}
</pre></td></tr></table></figure>

<p>Existing object values are retained:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>dotject(<span class="string">"b.c"</span>, {<span class="string">"a"</span>: <span class="literal">true</span>});

{
  <span class="string">"a"</span>: <span class="literal">true</span>,
  <span class="string">"b"</span>: {
    <span class="string">"c"</span>: {}
  }
}
</pre></td></tr></table></figure>

<p>Existing nested object properties are retained:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>dotject(<span class="string">"a.c"</span>, {<span class="string">"a"</span>:{<span class="string">"b"</span>:{}}});

{
  <span class="string">"a"</span>: {
    <span class="string">"b"</span>: {},
    <span class="string">"c"</span>: {}
  }
}
</pre></td></tr></table></figure>

<h3 id="Assign_a_value">Assign a value</h3>
<p>You can assign a value to the last nested property:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>dotject(<span class="string">"a.b"</span>, {}, <span class="number">10</span>);

{
  <span class="string">"a"</span>: {
    <span class="string">"b"</span>: <span class="number">10</span>
  }
}
</pre></td></tr></table></figure>

<h3 id="Assign_multiple_values">Assign multiple values</h3>
<p>You can assign a values to the last nested properties:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>dotject(<span class="string">"a,b.c,d"</span>, {}, <span class="literal">true</span>, <span class="number">10</span>, <span class="string">"test"</span>);

{
  <span class="string">"a"</span>: <span class="literal">true</span>,
  <span class="string">"b"</span>: {
    <span class="string">"c"</span>: <span class="number">10</span>
  },
  <span class="string">"d"</span>: <span class="string">"test"</span>
}
</pre></td></tr></table></figure>

<h3 id="Assign_multiple_values_and_override_existing">Assign multiple values and override existing</h3>
<p>You can assign a values to the last nested properties:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>dotject(<span class="string">"a,b"</span>, {<span class="string">"a"</span>: <span class="literal">false</span>}, <span class="literal">true</span>, <span class="string">"test"</span>)

{
  <span class="string">"a"</span>: <span class="literal">true</span>,
  <span class="string">"b"</span>: <span class="string">"test"</span>
}
</pre></td></tr></table></figure>

<h2 id="“Real_world”_example">“Real world” example</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">var</span> camera = {isEnabled: <span class="literal">true</span>};
camera = dotject(<span class="string">"settings.encoding.format,output.data.base64"</span>, camera, <span class="string">"JPEG"</span>, <span class="literal">true</span>);

{
  <span class="string">"isEnabled"</span>: <span class="literal">true</span>,
  <span class="string">"settings"</span>: {
    <span class="string">"encoding"</span>: {
      <span class="string">"format"</span>: <span class="string">"JPEG"</span>
    }
  },
  <span class="string">"output"</span>: {
    <span class="string">"data"</span>: {
      <span class="string">"base64"</span>: <span class="literal">true</span>
    }
  }
}
</pre></td></tr></table></figure>

<h2 id="Other_thoughts">Other thoughts</h2>
<p>I did consider not implementing the ability to extend existing objects, as this would provide cleaner usage and the base library (functional.js) does already have support for this with the <a href="https://github.com/leecrossley/functional-js#basic-%CE%BBassign-%CE%BBextend-example" target="_blank">λ.assign</a> (λ.extend) function. I’d be interested to hear your feedback on this, as personally I’m almost always passing a new object, which seems silly.</p>
<h2 id="Issues_and_pull_requests">Issues and pull requests</h2>
<p>Please raise any issues / pull requests directly on <a href="https://github.com/leecrossley/dotject/issues" target="_blank">github</a>.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[JSON5 Is Pointless and Unimaginative]]></title>
    <link href="http://ilee.co.uk/json5-is-pointless-and-unimaginative/"/>
    <id>http://ilee.co.uk/json5-is-pointless-and-unimaginative/</id>
    <published>2014-03-06T17:42:00.000Z</published>
    <updated>2014-03-06T18:32:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="JSON5">JSON5</h2>
<p>I get excited by new tech, especially when it’s JavaScript related. It usually makes me do a little dance.</p>
<p>The proposed extension to JSON, “<strong>JSON5</strong>“ unfortunately makes me die a little inside. My blog posts rarely adopt this tone, but I feel very strongly about this.</p>
<p>You can read more about JSON5 on the <a href="http://json5.org/" target="_blank">official site</a> but I’m going to have a whinge about why it’s <strong>completely pointless and unimaginative poppycock</strong>.</p>
<h2 id="The_reason_behind_JSON5">The reason behind JSON5</h2>
<p>To quote the proposal:</p>
<blockquote><p>“JSON isn’t the friendliest to write and maintain by hand. Keys need to be quoted; objects and arrays can’t have trailing commas; comments aren’t supported.”</p>
<footer><strong>- aseemk</strong></footer></blockquote>


<p>From that you can deduce the following main proposed features:</p>
<ul>
<li>Inline comments</li>
<li>Trailing commas in arrays</li>
<li>Trailing commas for object properties</li>
</ul>
<h2 id="The_benefits">The benefits</h2>
<p><strong>There isn’t one. Not one.</strong> If anything, this is teaching bad programming techniques:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>{
    why: [
        <span class="string">"is"</span>,
        <span class="string">"this"</span>,
        <span class="string">"better"</span>,
    ],
    <span class="comment">// (it isn't)</span>
}
</pre></td></tr></table></figure>

<h3 id="Inline_comments">Inline comments</h3>
<p>Property names should be descriptive enough to be obvious without comments, otherwise what you’re doing is probably wrong.</p>
<p>Don’t say “we need to comment our config files”. If your config file requires explanation, do it in the documentation with examples, not inline in your JSON!</p>
<h3 id="Commas">Commas</h3>
<p>This isn’t me getting hung up on old Internet Explorer 6 and 7 parsing, there is simply no need for trailing commas on objects or arrays. Is it worthy of a new spec to add this as a <em>feature</em>?</p>
<h2 id="Conclusion">Conclusion</h2>
<p>If it isn’t broken, don’t try to fix it. The approach of the proposal appears to be “what <em>could</em> we add” and seems mainly be suited to less technical people who modify config files.</p>
<p>Of course, I’d love for you to challenge my views…</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Sat Nav Map Directions for PhoneGap]]></title>
    <link href="http://ilee.co.uk/sat-nav-map-directions-for-phonegap/"/>
    <id>http://ilee.co.uk/sat-nav-map-directions-for-phonegap/</id>
    <published>2014-02-24T18:25:21.000Z</published>
    <updated>2014-02-24T19:39:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Maps_with_directions">Maps with directions</h2>
<p>Today I wrote a <a href="http://plugreg.com/plugin/leecrossley/cordova-plugin-directions" target="_blank">Cordova “Directions” Plugin</a> to utilise native maps apps for “sat nav” style direction purposes (using latitude and longitude). You can view the source code <a href="https://github.com/leecrossley/cordova-plugin-directions" target="_blank">here</a>.</p>
<h2 id="Install_the_plugin">Install the plugin</h2>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ cordova plugin add https://github.com/leecrossley/cordova-plugin-directions.git
</pre></td></tr></table></figure>

<p>That’s all the installation steps thanks to Cordova’s fantastic CLI and streamlined plugin architecture. You <strong>do not</strong> need to reference any JavaScript, the build command will add a directions object to your root automatically.</p>
<h2 id="Get_directions">Get directions</h2>
<p>After the deviceready event has been fired, pass latitude and longitude to the <code>navigateTo</code> function:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>directions.navigateTo(<span class="string">"51.50722"</span>, <span class="string">"-0.12750"</span>); <span class="comment">// latitude, longitude</span>
</pre></td></tr></table></figure>

<p>That’s it! Really, it’s that simple. The Google maps app will open on Android and give directions from the device’s current location. Similarly, Bing maps will open on Windows Phone 8.</p>
<h2 id="Platforms">Platforms</h2>
<p>I only needed support for Android and Windows Phone 8, it would be easy to add support for iOS too if anyone needs it. As usual, issues and pull requests on <a href="https://github.com/leecrossley/cordova-plugin-directions" target="_blank">GitHub</a>.</p>
<p>Note: <em>I managed to write this entire post without making any one direction jokes.</em></p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/phonegap/" term="phonegap"/>
    <category scheme="http://ilee.co.uk/tags/android/" term="android"/>
    <category scheme="http://ilee.co.uk/tags/wp8/" term="wp8"/>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Are You a Dot Guru?]]></title>
    <link href="http://ilee.co.uk/are-you-a-dot-guru/"/>
    <id>http://ilee.co.uk/are-you-a-dot-guru/</id>
    <published>2014-02-06T19:20:06.000Z</published>
    <updated>2014-02-08T08:44:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="The_-guru_top_level_domain">The .guru top level domain</h2>
<p>The “.guru” top level domain (TLD) became available for public registration this week. More than 20,000 .guru domain names have already been snapped up, proving it to be the most popular of the new public TLDs.</p>
<p><img src="/img/guru.png" alt="dot guru"></p>
<h3 id="Going,_going…">Going, going…</h3>
<p>Are you considered an expert in a particular field, product or category? If you are a guru, there might still be time to register your .guru domain name.</p>
<blockquote><p><strong>Take a quick search on <a href="http://www.shareasale.com/r.cfm?B=210738&amp;U=912360&amp;M=25581&amp;urllink=https://iwantmyname.com/domains/dot-guru" target="_blank">iwantmyname</a> to see what’s available.</strong></p>
</blockquote>


<h2 id="I’m_a_dot_guru">I’m a dot guru</h2>
<p>I quickly registered a couple of .guru domain names. I plan to utilise them as opposed to selling them, although someone has listed 3dprinting.guru for $7500 and mine are better than that.. so we’ll see.</p>
<p>There are also others listed for silly prices (and unlikely to sell?), I’ve seen one on ebay for $20K (or best offer, admittedly).</p>
<h2 id="Trademarks">Trademarks</h2>
<p>As you’d expect, most companies have registered their trademarks as domains (e.g. Apple have registered iphone.guru and pretty much all their products). There are however some registrations that do not belong to the trademark holders :) … <em>opens popcorn</em></p>
<h2 id="Other_TLDs">Other TLDs</h2>
<p>Other popular TLDs now available include:</p>
<ul>
<li>.bike</li>
<li>.clothing</li>
<li>.singles</li>
<li>.ventures</li>
<li>.plumbing</li>
<li>.holdings</li>
<li>.equipment</li>
<li>.lighting</li>
<li>.estate</li>
<li>.graphics</li>
<li>.camera</li>
<li>.gallery</li>
</ul>
<p>Note that .guru is more popular than all of the above put together.</p>
<h2 id="Is_this_the_end_of_-com?">Is this the end of .com?</h2>
<p><a href="http://www.youtube.com/watch?v=kxRX6LXDpWs" target="_blank">No</a>. To put things into perspective, there have been more than <strong>five times as many</strong> .com registrations than .guru registrations since Wednesday.</p>
<p>Even skype and twitter (at the time of writing this) aren’t picking up that domain.guru is a URL, even with a protocol prefix!</p>
<p>The .com TLD isn’t going anywhere. Past new TLDs such as .co didn’t replace the .com and neither will any of the proposed future new TLDs. </p>
<p>The new TLDs do have their place and are needed in the overcrowded .com world.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Debugging WP8 in PhoneGap]]></title>
    <link href="http://ilee.co.uk/debugging-wp8-in-phonegap/"/>
    <id>http://ilee.co.uk/debugging-wp8-in-phonegap/</id>
    <published>2014-01-31T18:00:30.000Z</published>
    <updated>2014-01-31T18:27:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Windows_Phone_8">Windows Phone 8</h2>
<p>Developing or porting a Cordova / PhoneGap app to WP8 can be particularly tricky. There are lots of gotchas, which are usually difficult to identify without experience. Today I <a href="https://issues.apache.org/jira/browse/CB-5957" target="_blank">reported an issue</a> that prevents the WP8 platform from even being used with the latest <em>stable</em> version of Cordova. It really does get less attention that iOS and Android.</p>
<p>One of the main issues making the platform difficult to develop for is the inability to easily see errors as they occur using the default setup. In contrast, on the Android platform, you’re able to get an extremely verbose output of <em>everything</em> using logcat.</p>
<h2 id="Show_me_the_errors">Show me the errors</h2>
<p>I discovered a neat trick over 8 months ago when I was developing a WP8 app in anger. Simply place this code in your app (so that it is executed before any potential errors):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>window.onerror = <span class="function"><span class="keyword">function</span> <span class="params">(message, file, line)</span> {</span>
    window.external.Notify(<span class="string">"Error in Application: "</span> +
        message + <span class="string">". Source File: "</span> + file + <span class="string">", Line: "</span> + line);
}
</pre></td></tr></table></figure>

<p>This code allows you to not only see any thrown errors in the Visual Studio output window, but also the error message itself and the file / line number of the offending code! A bit better than splurging <code>console.log</code>s everywhere :)</p>
<p>You can see the original gist I wrote <a href="https://gist.github.com/leecrossley/5668675" target="_blank">here</a>.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/phonegap/" term="phonegap"/>
    <category scheme="http://ilee.co.uk/tags/wp8/" term="wp8"/>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[New Features in grunt-timer v0.3]]></title>
    <link href="http://ilee.co.uk/new-features-in-grunt-timer-v03/"/>
    <id>http://ilee.co.uk/new-features-in-grunt-timer-v03/</id>
    <published>2014-01-19T10:59:01.000Z</published>
    <updated>2014-01-19T11:33:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="New_features_of_“grunt-timer”">New features of “grunt-timer”</h2>
<p>I’m pleased to announce the v0.3 release of <a href="https://npmjs.org/package/grunt-timer" target="_blank">grunt-timer</a>! The best part about this release is that it’s entirely down to the efforts of the open source community.</p>
<h2 id="What’s_new">What’s new</h2>
<p>There are 3 new features, implemented as interchangeable options:</p>
<h3 id="friendlyTime">friendlyTime</h3>
<p>Initialising grunt-timer with this option outputs durations in a friendly hours/minutes/seconds format (as opposed to just milliseconds, which is the default). e.g:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span> <span class="params">(grunt)</span> {</span>
    timer.init(grunt, { friendlyTime: <span class="literal">true</span> });
</pre></td></tr></table></figure>

<h3 id="deferLogs">deferLogs</h3>
<p>Initialising grunt-timer with this option outputs a summary of all task timings at the end of the grunt process (as opposed to between tasks, which is the default). e.g:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span> <span class="params">(grunt)</span> {</span>
    timer.init(grunt, { deferLogs: <span class="literal">true</span> });
</pre></td></tr></table></figure>

<p><em>deferLogs</em> can be used in conjunction with <em>friendlyTime</em>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span> <span class="params">(grunt)</span> {</span>
    timer.init(grunt, { friendlyTime: <span class="literal">true</span>, deferLogs: <span class="literal">true</span> });
</pre></td></tr></table></figure>

<h3 id="totalOnly">totalOnly</h3>
<p>Initialising grunt-timer with this option only the total time all tasks took to complete. This is useful for having many small, insignificant tasks that would generate considerable output even with deferLogs. e.g:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span> <span class="params">(grunt)</span> {</span>
    timer.init(grunt, { totalOnly: <span class="literal">true</span> });
</pre></td></tr></table></figure>

<p><em>totalOnly</em> can be used in conjunction with <em>friendlyTime</em>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span> <span class="params">(grunt)</span> {</span>
    timer.init(grunt, { friendlyTime: <span class="literal">true</span>, totalOnly: <span class="literal">true</span> });
</pre></td></tr></table></figure>

<h2 id="Credits">Credits</h2>
<h3 id="Contributors">Contributors</h3>
<ul>
<li>Thanks to <a href="https://github.com/geekdave" target="_blank">Dave Cadwallader</a> for the implementation of the <em>friendlyTime</em> and <em>deferLogs</em> options.</li>
<li>Thanks to <a href="https://github.com/carlherbst" target="_blank">Carl Herbst</a> for the implementation of the <em>totalOnly</em> option.</li>
</ul>
<h2 id="Pull_requests">Pull requests</h2>
<p>The full source code is available <a href="https://github.com/leecrossley/grunt-timer" target="_blank">here</a> and you can create pull requests <a href="https://github.com/leecrossley/grunt-timer/pulls" target="_blank">here</a>.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Ditch the www Subdomain]]></title>
    <link href="http://ilee.co.uk/ditch-the-www-subdomain/"/>
    <id>http://ilee.co.uk/ditch-the-www-subdomain/</id>
    <published>2014-01-08T09:15:23.000Z</published>
    <updated>2014-01-08T09:56:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="It’s_time">It’s time</h2>
<p>We’re in the year 2014, people know what the world wide web is (and have known for quite some time), yet may organisations still insist on using a www subdomain for their primary website instead of a pretty <em>subdomain-less</em> url.</p>
<h2 id="Keep_it_simple">Keep it simple</h2>
<p>I don’t use, link to, or promote the url <code>www.ilee.co.uk</code> - I always use <code>ilee.co.uk</code>. It’s prettier, simpler and still obviously a url.</p>
<h2 id="Use_a_permanent_(301)_redirect">Use a permanent (301) redirect</h2>
<p>I do redirect <code>www.ilee.co.uk</code> to <code>ilee.co.uk</code>, for completeness and SEO reasons. Serving the same content for each url could be considered duplicate content without a redirect. GitHub pages automatically handles this and it’s GitHub’s preferred format (you’ll never see <code>www.github.com</code>, it’s always <code>github.com</code>).</p>
<h3 id="Expressjs">Expressjs</h3>
<p>To my horror I realised yesterday that <code>www.plugreg.com</code>, didn’t redirect to <code>plugreg.com</code>. plugreg is written in node.js and uses the expressjs framework, so I wrote a handy little function to handle the www redirect scenario:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">var</span> redirect = <span class="function"><span class="keyword">function</span> <span class="params">(req, res, next)</span> {</span>
    <span class="keyword">var</span> baseUrl = req.protocol + <span class="string">"://"</span> + req.host,
        wwwUrl = req.protocol + <span class="string">"://www."</span>;
    <span class="keyword">if</span> (baseUrl.substring(<span class="number">0</span>, wwwUrl.length) === wwwUrl) {
        res.redirect(<span class="number">301</span>, baseUrl.replace(<span class="string">"://www."</span>, <span class="string">"://"</span>) + req.url);
    } <span class="keyword">else</span> {
        next();
    }
};

app.all(<span class="string">"*"</span>, redirect);
</pre></td></tr></table></figure>

<h2 id="Configure_webmaster_tools">Configure webmaster tools</h2>
<p>Under “site settings” of <a href="https://www.google.com/webmasters/tools/" target="_blank">Google Webmaster Tools</a>, you also have the option to set your <em>preferred domain</em>:</p>
<ul>
<li>Don’t set a preferred domain</li>
<li>Display URLs as www.ilee.co.uk</li>
<li>Display URLs as ilee.co.uk</li>
</ul>
<p><strong>Here’s to a www-less 2014</strong>.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/app/" term="app"/>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Mobile UX to Impact SEO]]></title>
    <link href="http://ilee.co.uk/mobile-ux-to-impact-seo/"/>
    <id>http://ilee.co.uk/mobile-ux-to-impact-seo/</id>
    <published>2014-01-03T08:25:40.000Z</published>
    <updated>2014-01-03T09:29:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Optimise_for_mobile">Optimise for mobile</h2>
<p>With huge numbers of internet users using mobiles and tablet devices to browse the web, it’s more important than ever to optimise your website for these devices.</p>
<h3 id="Creating_a_mobile_website_is_not_enough">Creating a mobile website is not enough</h3>
<p>If you truly want to engage users on mobile devices, you’ve got to consider <em>their experience</em>, not just how the website looks. Touch interfaces, varying resolutions / density and gestures are among just a few of the challenges technology advancements have brought.</p>
<h2 id="What_exactly_is_UX?">What exactly is <em>UX</em>?</h2>
<p>UX stands for <strong>U</strong>ser e<strong>X</strong>perience, which is the comprehensive experience of a user interacting with a product (in this case a website and more specifically, a website on mobile devices). It encompasses factors such as ease-of-use and user gratification.</p>
<h3 id="UX_is_hard">UX is hard</h3>
<p>There’s no completely right answer but there are <em>better answers</em>. Google are starting to analyse the mobile user experience of websites using some set tangible metrics, so this is a good quantifiable place to start.</p>
<h2 id="Why_UX?">Why UX?</h2>
<p>It’s all about the users and they are ultimately going to result in conversions (if that’s your aim) usually through improved productivity or satisfaction though a good user experience. Although Google looks to start weighting search results based on their perceived automated user experience, the focus should still be primarily on real users. After all, web traffic on its own means nothing.</p>
<h2 id="PageSpeed_insights">PageSpeed insights</h2>
<p>The <a href="https://developers.google.com/speed/pagespeed/insights" target="_blank">PageSpeed Insights</a> tool is now reporting mobile user experience, in addition to page speed. This is a great place to start to give you instant feedback on some tangible metrics. The tool currently analyses:</p>
<ul>
<li>Use of plugins</li>
<li>Viewport metatag and content size within the viewport</li>
<li>Size of touch/tap “clickable” interactions</li>
<li>Font sizes</li>
</ul>
<p>The website provides more info on these. This blog passed all of the user experience first time, except for the sizing of anchor tags. To fix this, I added the following css to my article (content) section: </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">media</span> screen and (max-width: <span class="number">600</span>px) </span>{
  <span class="tag">article</span> <span class="tag">a</span> <span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">3</span>px <span class="number">7</span>px</span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#ecf0f1</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5</span>px <span class="number">0</span>px</span></span>;
  <span class="rule">}</span></span>
}
</pre></td></tr></table></figure>

<h2 id="That’s_not_the_end">That’s not the end</h2>
<p>The PageSpeed Insights are a great place to start for existing mobile websites, but it’s not the end of the road, there are many other considerations (every UX designer and every website will have their own particulars). Consider <a href="http://en.wikipedia.org/wiki/A/B_testing" target="_blank">split A/B testing</a> and responding to user feedback too.</p>
<p>If you have the luxury of a starting your mobile website from scratch or a rewrite, consider user experience right from the outset and get users involved in the process as early as possible.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/iphone/" term="iphone"/>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
    <category scheme="http://ilee.co.uk/tags/html/" term="html"/>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Learn nodejs in 2014]]></title>
    <link href="http://ilee.co.uk/learn-nodejs-in-2014/"/>
    <id>http://ilee.co.uk/learn-nodejs-in-2014/</id>
    <published>2014-01-02T09:41:26.000Z</published>
    <updated>2014-01-02T10:13:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="The_year_of_the_node">The year of the node</h2>
<p>If you haven’t already (shame on you), it really is time to sit down and have a play with <a href="http://nodejs.org/" target="_blank">node.js</a>. So that you have absolutely no excuses, I’ve put together a super quick start guide to kick you off.</p>
<p>Nodejs was first released back in May 2009 but has gathered huge momentum over the past year or so.</p>
<h2 id="Super_quick_start">Super quick start</h2>
<h3 id="Install">Install</h3>
<p><a href="http://nodejs.org/download/" target="_blank">Download</a> the installer for your OS and install.</p>
<h3 id="Create">Create</h3>
<p>Create a new directory for your app (optional) and a blank <code>app.js</code> JavaScript file.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>$ mkdir nodeapp
$ <span class="built_in">cd</span> nodeapp
$ touch app.js
</pre></td></tr></table></figure>

<h3 id="Code">Code</h3>
<p>In your newly created JavaScript file, add the following code:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);

http.createServer(<span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> {</span>
    res.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>});
    res.end(<span class="string">"I know node.js!"</span>);
}).listen(<span class="number">4000</span>);
</pre></td></tr></table></figure>

<h3 id="Run">Run</h3>
<p>Ensure you’re in the directory of your <code>app.js</code> JavaScript file and run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ node app
</pre></td></tr></table></figure>

<p>Now visit <code>http://localhost:4000/</code> to see your newly created node.js http server in action!</p>
<h2 id="Packages">Packages</h2>
<p>You’ll notice in the example above that we’re using <code>http</code>, which is part of the node core. There are over 50,000 3rd party packages available on the <a href="https://npmjs.org/" target="_blank">node package manager registry</a>, that should keep you busy for the rest of the year :)</p>
<p>Happy new year!</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Using npm in Europe]]></title>
    <link href="http://ilee.co.uk/using-npm-in-europe/"/>
    <id>http://ilee.co.uk/using-npm-in-europe/</id>
    <published>2013-12-20T07:37:13.000Z</published>
    <updated>2013-12-20T08:12:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Protip">Protip</h2>
<p>I wrote a short <a href="https://coderwall.com/p/iihlxa" target="_blank">protip</a> this morning about the European mirror for npm. Developers in Europe (such as myself, based in Manchester, UK), will find this Germany based mirror significantly faster and possibly more reliable.</p>
<p>You can force the use of the European mirror by simply appending the <code>--registry http://registry.npmjs.eu</code> flag to the end of your command, however, I recommend you just set up an alias, e.g:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ alias enpm=<span class="string">"npm --registry http://registry.npmjs.eu"</span>
</pre></td></tr></table></figure>

<h2 id="How_much_faster?">How much faster?</h2>
<p>Rather than just claim <em>it is faster</em>, I want to take this blog post further and prove that it’s faster.</p>
<h3 id="Quick_test">Quick test</h3>
<p>Let’s pick a package with a few dependencies, <code>grunt</code>.</p>
<p>First, let’s run <code>npm cache clean</code> to remove any data in the npm cache folder. Without supplying a path, this clears the entire cache. A quick run of <code>npm cache ls</code> confirms this.</p>
<h3 id="Timing">Timing</h3>
<p>How do we actually go about timing an <code>npm install</code>? Well, there’s a basic command called <code>time</code> that’s built into most shells and allows us to easily see the execution time of a command (both “real time” used and system time). This is accurate enough for what we need.</p>
<p>Let’s give it a go:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>$ time npm install grunt
<span class="comment"># =4.71s user 1.69s system 29% cpu 21.573 total</span>
</pre></td></tr></table></figure>

<p>Now let’s clear the cache again and try the European mirror:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>$ time npm install grunt --registry http://registry.npmjs.eu
<span class="comment"># =3.75s user 1.48s system 44% cpu 11.799 total</span>
</pre></td></tr></table></figure>

<p>21.573s vs 11.799s means it’s almost <em>twice as fast</em> for me to use the European mirror of the npm registry.</p>
<p>Damn, now I don’t have long enough to make a coffee.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[List Node Packages w/o Dependencies]]></title>
    <link href="http://ilee.co.uk/list-node-packages-wo-dependencies/"/>
    <id>http://ilee.co.uk/list-node-packages-wo-dependencies/</id>
    <published>2013-12-18T13:18:02.000Z</published>
    <updated>2013-12-18T14:11:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="npm_list">npm list</h2>
<p><code>npm list</code> (or <code>npm ls</code> which is my preferred shorthand) is a useful way to determine what npm packages are currently installed. The issue is, you get all their dependencies too (and their dependencies dependencies and their dependencies dependencies dependencies…). A bit frustrating, since this list is usually exceptionally long and no amount of nesting formatting can fully combat this.</p>
<h3 id="Added_depth">Added depth</h3>
<p>Turns out there’s an easy way to combat this, although it’s not in the <a href="https://npmjs.org/doc/cli/npm-ls.html" target="_blank">documentation for npm ls</a>.</p>
<p>By adding <code>--depth=0</code> to the end of the command, it only draws out the top of the dependency tree. Happy days:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ npm ls --depth=<span class="number">0</span>
</pre></td></tr></table></figure>

<h3 id="Go_global">Go global</h3>
<p>This even works for globally installed packages too, by adding the standard <code>-g</code> flag.</p>
<h2 id="I’m_getting_errors!">I’m getting errors!</h2>
<p>When I first tried this, I ended up with a bunch of nonsensical errors (e.g. “npm ERR! max depth reached” among others), although there was nothing really wrong.</p>
<p>You can combat this by adding <code>&quot;$@&quot; 2&gt;/dev/null</code> to the end. This essentially ignores the pointless errors by redirecting them to /dev/null. <em>Nothing to see here, move along</em> :)</p>
<h2 id="The_complete_command">The complete command</h2>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ npm ls --depth=<span class="number">0</span> <span class="string">"<span class="variable">$@</span>"</span> <span class="number">2</span>&gt;/dev/null
</pre></td></tr></table></figure>

<p>If you don’t want to type this out all the time (I certainly don’t), you can alias it up:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ alias npmls=<span class="string">"npm ls --depth=0 "</span><span class="variable">$@</span><span class="string">" 2&gt;/dev/null"</span>
</pre></td></tr></table></figure>

<p>Then usage is as simple as:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ npmls
</pre></td></tr></table></figure>

]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Native Page Transitions with PhoneGap]]></title>
    <link href="http://ilee.co.uk/native-page-transitions-with-phonegap/"/>
    <id>http://ilee.co.uk/native-page-transitions-with-phonegap/</id>
    <published>2013-12-16T07:11:57.000Z</published>
    <updated>2013-12-19T09:37:47.000Z</updated>
    <content type="html"><![CDATA[<p>I was too busy to write any blog posts last week, but this more than makes up for it…</p>
<h2 id="Stop_the_press!">Stop the press!</h2>
<p>Having spent copious amounts of time emulating native iOS page transitions with JavaScript, HTML5 and CSS3 in the past, everything is about to change.</p>
<p>My new Cordova / PhoneGap plugin allows you to use the real native iOS transitions without ever leaving your web view!</p>
<p><strong>I’ve turned page transitions around</strong> (poor pun, I know).</p>
<p><img src="/img/transition.png" alt="Page transition"></p>
<h2 id="Video_demo">Video demo</h2>
<p>This is so good, for the first time on my blog, it demands a <a href="https://vimeo.com/81980283" target="_blank">video demo</a>. Yes, that really is a Cordova web view with a single HTML page.</p>
<h2 id="Down_to_business">Down to business</h2>
<p>If you’re a Cordova / PhoneGap developer, I’m sure you’re already desperate to get started, so I’ll cut to the chase.</p>
<h3 id="Install">Install</h3>
<p>The source code is available on <a href="https://github.com/leecrossley/cordova-plugin-native-transitions" target="_blank">Github</a>.</p>
<p>Assuming you’re using Cordova 3.x and the CLI, installation is as simple as using the <code>cordova plugin add</code> command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>cordova plugin add https://github.com/leecrossley/cordova-plugin-native-transitions.git
</pre></td></tr></table></figure>

<p>You <strong>do not</strong> need to reference any JavaScript, the Cordova plugin architecture will add a <code>nativetransitions</code> object to your root automatically when you build.</p>
<h2 id="Transitions">Transitions</h2>
<h3 id="Flip">Flip</h3>
<p>Flip page transition, with support for flipping left or right:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">var</span> duration = <span class="number">0.5</span>, <span class="comment">// animation time in seconds</span>
    direction = <span class="string">"right"</span>; <span class="comment">// animation direction - left || right</span>
nativetransitions.flip(duration, direction, onComplete);
</pre></td></tr></table></figure>

<h3 id="Curl">Curl</h3>
<p>Curl page transition, with support for flipping curling up or down:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">var</span> duration = <span class="number">0.5</span>, <span class="comment">// animation time in seconds</span>
    direction = <span class="string">"down"</span>; <span class="comment">// animation direction - up || down</span>
nativetransitions.curl(duration, direction, onComplete);
</pre></td></tr></table></figure>

<h3 id="Fade">Fade</h3>
<p>A simple fade page transition:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">var</span> duration = <span class="number">0.5</span>; <span class="comment">// animation time in seconds</span>
nativetransitions.fade(duration, onComplete);
</pre></td></tr></table></figure>

<h2 id="Example">Example</h2>
<p>Here’s an example of how I suggest you use the plugin in your code, so that you get a realistic transition:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// Change your html here</span>
}, <span class="number">50</span>);
nativetransitions.flip(duration, direction);
</pre></td></tr></table></figure>

<h2 id="More_transitions?">More transitions?</h2>
<p>If you’d like to add more transitions (possibly custom transitions of your own) please pull request. If you’d like something in particular, let me know and I’ll see if I can implement it for you.</p>
<p><strong>This is pretty flippin’ amazing stuff</strong> (OK, I’ll stop now).</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/phonegap/" term="phonegap"/>
    <category scheme="http://ilee.co.uk/tags/iphone/" term="iphone"/>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
    <category scheme="http://ilee.co.uk/tags/html/" term="html"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Looping Audio with PhoneGap]]></title>
    <link href="http://ilee.co.uk/looping-audio-with-phonegap/"/>
    <id>http://ilee.co.uk/looping-audio-with-phonegap/</id>
    <published>2013-12-06T10:05:49.000Z</published>
    <updated>2013-12-06T10:47:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Playing_media_on_repeat">Playing media on repeat</h2>
<p>Playing media is easy with Phonegap / Cordova using the core <a href="http://www.plugreg.com/plugin/apache/cordova-plugin-media" target="_blank">media plugin</a>. I’m using it in the game I’m writing.</p>
<p>The issue is, I wanted to be able to play a background music loop on repeat (don’t worry, the user can switch this off in my apps settings, or simply <a href="/phonegap-plays-sound-on-mute/">mute the sound</a>).</p>
<h3 id="iOS">iOS</h3>
<p>There’s an “iOS Quirk” that makes this really easy for iOS devices. From the documentation:</p>
<blockquote>“<strong>numberOfLoops</strong>: Pass this option to the play method to specify the number of times you want the media file to play”</blockquote>


<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">var</span> myMedia = <span class="keyword">new</span> Media(<span class="string">"/audio/my.mp3"</span>);
myMedia.play({ numberOfLoops: <span class="number">2</span> });
</pre></td></tr></table></figure>

<p>It’s a bit frustrating that you can’t do <code>numberOfLoops: -1</code> to repeat indefinitely, but I can live with it. The issue is, you can’t do this on Android.</p>
<h3 id="Android">Android</h3>
<p>Here’s my work around (that I also for iOS too to keep the JavaScript consistent). It’s really frustrating because this could easily be built into the plugin’s native component.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">var</span> myMedia;

<span class="keyword">var</span> loop = <span class="function"><span class="keyword">function</span> <span class="params">(status)</span> {</span>
    <span class="keyword">if</span> (status === Media.MEDIA_STOPPED) {
        myMedia.play();
    }
};

myMedia = <span class="keyword">new</span> Media(<span class="string">"/audio/my.mp3"</span>, <span class="literal">null</span>, <span class="literal">null</span>, loop);
myMedia.play();
</pre></td></tr></table></figure>

<p>I’m using the <code>mediaStatus</code> callback that executes when the media status changes, to check to see if the media has stopped playing (it’s finished) and to play the media again.</p>
<p>Can we have a <code>repeat: true</code> please?</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/phonegap/" term="phonegap"/>
    <category scheme="http://ilee.co.uk/tags/iphone/" term="iphone"/>
    <category scheme="http://ilee.co.uk/tags/android/" term="android"/>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Pause between Grunt Tasks]]></title>
    <link href="http://ilee.co.uk/pause-between-grunt-tasks/"/>
    <id>http://ilee.co.uk/pause-between-grunt-tasks/</id>
    <published>2013-12-03T08:44:40.000Z</published>
    <updated>2013-12-03T09:11:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Pause_for_debugging">Pause for debugging</h2>
<p>I <a href="/let-grunt-handle-your-tasks/">blogged a while ago</a> about the Grunt JavaScript task runner, a great way to automate your JavaScript tasks.</p>
<p>On complex projects, with numerous multitasks that display output, it occurred to me that you might want to be able to pause the task runner after each task. You may perhaps need to assess the output or check something, then decide whether or not to continue running the remaining tasks.</p>
<h2 id="grunt-pause">grunt-pause</h2>
<p>I’ve implemented a Grunt plugin (in a slightly unorthodox manner) to facilitate the pausing, “<a href="https://npmjs.org/package/grunt-pause" target="_blank">grunt-pause.js</a>“. It uses the hooker to watch for task changes, then fires off a dynamically added task after each change. The <a href="https://npmjs.org/package/inquirer" target="_blank">inquirer</a> node package then kicks in to prompt the developer to either continue (default), or clear the task queue and end the task runner.</p>
<h2 id="Grunt_core">Grunt core</h2>
<p>Personally, I think this should be part of the Grunt core. It would be much easier to implement (not hooky hacky), and could be enabled simply with a “—pause” argument on the command line.</p>
<p>If this package gets used, I’ll consider a pull request to Grunt core for version 0.5.0. This package will still be useful for version 0.4.x etc.</p>
<h2 id="Usage">Usage</h2>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm <span class="keyword">install</span> grunt-pause <span class="comment">## --save-dev</span>
</pre></td></tr></table></figure>


<p>Add the grunt-pause reference to the very top of your Gruntfile.js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">var</span> pause = <span class="built_in">require</span>(<span class="string">"grunt-pause"</span>);
</pre></td></tr></table></figure>


<p>Add the pause init call at the top of the module.exports function of your Gruntfile.js::</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span> <span class="params">(grunt)</span> {</span>
    pause.init(grunt);
</pre></td></tr></table></figure>


<h2 id="Sample_output">Sample output</h2>
<p>Sample screenshot of the console output:</p>
<p><img src="https://raw.github.com/leecrossley/grunt-pause/master/grunt-pause.png" alt="Console Screenshot">.</p>
<h2 id="Improvements?">Improvements?</h2>
<p>You might not want to have the pause between all tasks, perhaps we could pass an array of exclusions or inclusions when we call <code>pause.init(grunt)</code>?</p>
<p>As always, issues and pull request on the <a href="https://github.com/leecrossley/grunt-pause" target="_blank">git repo</a>.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[PlugReg v0.7 Is Now Live]]></title>
    <link href="http://ilee.co.uk/plugreg-v07-is-now-live/"/>
    <id>http://ilee.co.uk/plugreg-v07-is-now-live/</id>
    <published>2013-12-02T11:24:44.000Z</published>
    <updated>2013-12-02T11:46:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="What’s_new">What’s new</h2>
<p>It’s now even easier to find Cordova / PhoneGap plugins on <a href="http://www.plugreg.com" target="_blank">plugreg</a>. To keep up to date with the latest plugreg and plugin related information follow <a href="https://twitter.com/plugreg" target="_blank">@plugreg on twitter</a>.</p>
<h3 id="Features">Features</h3>
<p>Here are some of the new features that have been implemented for v0.7:</p>
<ul>
<li><strong>Plugin details</strong>. New design and more info has been added:<ul>
<li>Version number</li>
<li>Last modified</li>
<li>Stars</li>
<li>Issues</li>
</ul>
</li>
<li><strong>Avatars</strong>. Now hotlinks to gravatar or github identicons</li>
<li><strong>Homepage</strong>. A new homepage design, giving various stats, such as:<ul>
<li>Total number of plugins</li>
<li>Total number of authors</li>
<li>Recently Added Plugins (and when they were added)</li>
<li>Recently Updated Plugins (and when they were updated)</li>
<li>Authors with the Most Plugins (and how many plugins each)</li>
<li>Authors with the Most Stars (combined from all their plugins)</li>
<li>Plugins with the Most Stars (and how many stars)</li>
<li>Plugins with the Most Issues (and how many issues)</li>
</ul>
</li>
<li><strong>Search</strong>. Search is now weighted based on plugin stars</li>
<li><strong>Plugin list</strong>. Now contains the number of plugin stars</li>
</ul>
<h3 id="Refresh">Refresh</h3>
<p>All plugin details are now updated/refreshed every 30 minutes (this includes issues / stars etc).</p>
<h3 id="API">API</h3>
<p>A basic API is now available listing details of all the indexed plugins - get in touch for more details if you’d like to use it.</p>
<h3 id="Bugs">Bugs</h3>
<p>There are also many, many bug fixes.</p>
<h2 id="Future_updates">Future updates</h2>
<p>Further updates are on the way shortly. If you’d like to suggest an improvement or report an issue, you can do so on Twitter <a href="https://twitter.com/plugreg" target="_blank">@plugreg</a></p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/phonegap/" term="phonegap"/>
    <category scheme="http://ilee.co.uk/tags/iphone/" term="iphone"/>
    <category scheme="http://ilee.co.uk/tags/android/" term="android"/>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[npm Cardiac Arrest]]></title>
    <link href="http://ilee.co.uk/npm-cardiac-arrest/"/>
    <id>http://ilee.co.uk/npm-cardiac-arrest/</id>
    <published>2013-11-28T09:57:53.000Z</published>
    <updated>2013-11-28T10:30:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="It’s_happening_again">It’s happening again</h2>
<h3 id="Beep,_beep,_beeeeeeep">Beep, beep, beeeeeeep</h3>
<p>The node package manager “<a href="https://npmjs.org/" target="_blank">npm</a>“ is once again grinding to a halt. A <a href="http://blog.nodejs.org/2013/11/26/npm-post-mortem/" target="_blank">post-mortem</a> was published on the official nodejs blog after the recent downtime (November 4th / November 15th 2013), but it’s problems are far from resolved (as demonstrated today).</p>
<p><img src="/img/npm-beat.png" alt="npm Cardiac Arrest"></p>
<h2 id="Keep_it_beating,_keep_it_awesome">Keep it beating, keep it awesome</h2>
<p>With no other alternative, npm is fundamental to node. More infrastructure is needed to continue to operate the npm registry (multi-master approach and <strong>throw hardware and people at it</strong>).</p>
<p>In my personal opinion (and I know others echo this sentiment) there also needs to be a change to the way npm handles its dependencies. When currently installing a package, half of the registry is downloaded with it. There are ideas, such as materialising a vector of [package, version] -&gt; hash, but this is exceptionally tricky.</p>
<p>The npm registry has served over 150 million requests and 33 million package downloads in the last week. This is 10 times as many requests and downloads as this time last year, with all signs pointing to further exponential growth.</p>
<h2 id="Donate">Donate</h2>
<p><strong>I’ve donated</strong> and I also continue to host my personal node projects on nodejitsu. If you’re a developer that’s ever used npm, <a href="https://scalenpm.org/" target="_blank">donate now on the official site</a> and keep npm everything it needs to be for the community.</p>
<p><img src="/img/npm-thanks.png" alt="Thanks"></p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Nesting Ugly Anonymous Functions]]></title>
    <link href="http://ilee.co.uk/nesting-ugly-anonymous-functions/"/>
    <id>http://ilee.co.uk/nesting-ugly-anonymous-functions/</id>
    <published>2013-11-27T12:57:36.000Z</published>
    <updated>2013-11-27T13:49:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="We_all_do_it">We all do it</h2>
<p>If you’re a JavaScript developer (or even more likely if you’re a developer that dabbles with JavaScript) you’ll have written code like this many times:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>document.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// handler code ...</span>
    alert(<span class="string">"document clicked and fired ugly nested function"</span>);
});
</pre></td></tr></table></figure>

<p>You might be thinking <strong>what’s wrong with that</strong>, but I hope you’re thinking <strong>I’m better than that, I’d do something like this</strong>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">var</span> doStuff = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="comment">// handler code ...</span>
    alert(<span class="string">"document clicked and fired alert function"</span>);
};

document.addEventListener(<span class="string">"click"</span>, doStuff);
</pre></td></tr></table></figure>

<p><strong>Great</strong>. What do you do if the alert text is dynamic? I’ve seen all kinds of ugly messes that usually lead back to the first approach or result in timing and scoping issues.</p>
<p>This problem isn’t just limited to event handlers, ugly nested anonymous functions are frequently used in callbacks and iterators. This results in poorer performance and <a href="http://youtu.be/bqn7vXeVCLE?t=5s" target="_blank">uglier</a>, less maintainable and bug prone code.</p>
<h2 id="The_right_frame_of_bind">The right frame of <em>bind</em></h2>
<p>Yes, I really did just make that joke, it’s been a long week. In all seriousness <code>Function.prototype.bind</code> is your friend here, it’ll help you clean up your messy code, like any good friend should. There are other ways to do this of course (JavaScript is wonderful for that):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">var</span> doStuff = <span class="function"><span class="keyword">function</span> <span class="params">(message)</span> {</span>
    <span class="comment">// handler code ...</span>
    alert(message);
};

document.addEventListener(<span class="string">"click"</span>, doStuff.bind(<span class="literal">null</span>, <span class="string">"document clicked"</span>));
</pre></td></tr></table></figure>

<p>Clean, reusable and easier to maintain. Better than inlining or manipulating variables at a higher scope.</p>
<h2 id="A_good_curry">A good <em>curry</em></h2>
<p>You can’t beat a good curry, especially if you find yourself nesting iterator functions (ewww). I suggest you take a look at <a href="https://github.com/leecrossley/functional-js" target="_blank">functional.js</a>, or you can read earlier posts on my blog (<a href="/functional-javascript-library/">first post here</a>).</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
</feed>
