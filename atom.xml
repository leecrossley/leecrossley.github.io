<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iLee]]></title>
  <subtitle><![CDATA[I write code that sounds awesome and music that's bug free]]></subtitle>
  <link href="http://ilee.co.uk/atom.xml" rel="self"/>
  <link href="http://ilee.co.uk"/>
  <updated>2013-08-09T07:39:51.740Z</updated>
  <id>http://ilee.co.uk/</id>
  <author>
    <name><![CDATA[Lee Crossley]]></name>
    <email><![CDATA[leee@hotmail.co.uk]]></email>
  </author>
  <entry>
    <title type="html"><![CDATA[JavaScript Number Rounding]]></title>
    <link href="http://ilee.co.uk/javascript-arithmetic-number-rounding/"/>
    <id>http://ilee.co.uk/javascript-arithmetic-number-rounding/</id>
    <published>2013-08-09T06:26:20.000Z</published>
    <updated>2013-08-09T07:39:23.000Z</updated>
    <content type="html"><![CDATA[<h2>Numbers don&#39;t add up!</h2>
<p><strong>0.1 + 0.2 = 0.30000000000000004</strong></p>
<p>Sometimes numbers in JavaScript (and other languages) simply don&#39;t appear to add up. <a href="http://codepen.io/leecrossley/pen/DBJcE">Don&#39;t believe me?</a>.</p>
<figure class="highlight lang-javascript"><figcaption><span>0.1 + 0.2 = 0.30000000000000004 </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">var</span> x = <span class="number">0.1</span>,
    y = <span class="number">0.2</span>;
 
<span class="keyword">var</span> result = x + y;
 
console.log(result);
</pre></td></tr></table></figure>


<p>I discovered this in the early days of programming when building a JavaScript calculator, which fortunately is now nowhere to be seen :)</p>
<h2>Floating point numbers</h2>
<p>JavaScript uses <a href="http://en.wikipedia.org/wiki/Floating_point">Floating Point Numbers</a>, which don&#39;t cater for an accurate representations of a decimal. This means that as soon as the variable is interpreted at runtime, a rounding issue is introduced. Computers are faster and more efficient at dealing with computations on binary numbers, which produces the issue with the 17th decimal place.</p>
<h2>How to fix it</h2>
<p><a href="http://codepen.io/leecrossley/pen/hKmEa">Here&#39;s an example</a> of how I eliminate the rounding issues.</p>
<figure class="highlight lang-javascript"><figcaption><span>0.1 + 0.2 = 0.3 </span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">var</span> x = <span class="number">0.1</span>,
    y = <span class="number">0.2</span>;
 
<span class="keyword">var</span> multiplier = <span class="function"><span class="keyword">function</span> <span class="params">(dec)</span> {</span>
  <span class="keyword">var</span> str = dec.toString(),
      match = <span class="regexp">/(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/</span>.exec(str);
  <span class="keyword">return</span> Math.max(<span class="number">0</span>, (match[<span class="number">1</span>] == <span class="string">'0'</span> ? <span class="number">0</span> : (match[<span class="number">1</span>] || <span class="string">''</span>).length) - (match[<span class="number">2</span>] || <span class="number">0</span>)) * <span class="number">10</span>;
};
 
<span class="keyword">var</span> highestMultiplier = Math.max(multiplier(x), multiplier(y));
 
<span class="keyword">var</span> result = ((x * highestMultiplier) + (y * highestMultiplier)) / highestMultiplier;
 
console.log(result);
</pre></td></tr></table></figure>


<p>Essentially, I&#39;m calculating the smallest number, which if multiplied by either number I&#39;m adding together individually, would result in an integer. This is achieved by evaluating the number with the most numbers after the decimal point and what that value is. Once I have the multiplier, I use it on both the numbers I&#39;m adding together, then do the addition, then divide by the multiplier to return the numbers back to their original decimal state.</p>
<p>By performing the addition on integers, no rounding issues occur.</p>
<h2>Libraries</h2>
<p>If you&#39;re needing precision with lots of complex calculations, there are JavaScript libraries specifically for this (although some are horrible Java ports). <a href="https://github.com/MikeMcl/bignumber.js/">bignumber.js</a> looks OK and I remember using <a href="http://www.leemon.com/crypto/BigInt.js">bigint.js</a> with <a href="https://twitter.com/danielcassidy">@danielcassidy</a> and <a href="https://twitter.com/anttears">@anttears</a> back in the day.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Use Google PageSpeed on Your Site]]></title>
    <link href="http://ilee.co.uk/use-google-pagespeed-on-your-site/"/>
    <id>http://ilee.co.uk/use-google-pagespeed-on-your-site/</id>
    <published>2013-08-08T08:32:45.000Z</published>
    <updated>2013-08-08T09:55:13.000Z</updated>
    <content type="html"><![CDATA[<h2>Why?</h2>
<p>The short of it - speeding up your website is a great thing to do all round. It improves visitor experience, retention, and conversions. With data mobile browsing becoming increasingly popular, saving those extra few KB to download can make a big difference to your users.</p>
<p>On April 9th 2010 <a href="http://googlewebmastercentral.blogspot.co.uk/2010/04/using-site-speed-in-web-search-ranking.html">Google officially announced</a> the inclusion of a new &quot;signal&quot; in their search ranking algorithms. You guessed it, page speed. So it goes without saying that using Google PageSpeed on your site could also improve your search engine rankings.</p>
<h2>It&#39;s free?</h2>
<p>Yes and no, Google are in it for the €€€ in their Irish pocket. The Google PageSpeed <a href="https://developers.google.com/speed/pagespeed/insights">Insights</a> are currently (and I imagine will always be) free, but the Google PageSpeed <a href="https://developers.google.com/speed/pagespeed/service">Service</a> is only a limited free trial. Lose <em>wait</em> that way and the pounds are sure to drop off.</p>
<h2>Insights vs Service</h2>
<p>The Insights allow Google to analyse your website and generate suggestions to help make it faster. The PageSpeed score is any number up to 100 (the higher the better, but Google have suggested you should aim for 85 and above). They also colour code suggestions to help you see which changes will give you the highest impact and potentially quick wins (they&#39;re red). Their current suggestions are mainly:</p>
<ul>
<li>Eliminate external render-blocking Javascript and CSS</li>
<li>Avoid landing page redirects</li>
<li>Leverage browser caching</li>
<li>Enable compression</li>
<li>Reduce server response time to &lt; 200ms</li>
<li>Minify HTML, CSS and JavaScript</li>
<li>Optimise images</li>
</ul>
<p><img src="/img/response-speed.png" alt="200ms Response"></p>
<p>Some of the Insights guidance is (probably intentionally) tough to follow and may also be constrained by the technology or hosting you&#39;re using. Do not fear, Google is here, with their quick and easy, automated service. Alternatively, you could just use a <a href="http://ilee.co.uk/static-site-generators/">Static Site Generator</a> with some sensible hosting. I&#39;ll probably go over some of the more tricky suggestions at a later date.</p>
<h2>Don&#39;t just do it once</h2>
<p>Do it every night if you can - and make sure you&#39;re always on top. As for PageSpeed Insights, because the web is fast paced and continually evolving, they&#39;re iterative. Just like the main search algorithm, expect the PageSpeed algorithm and suggestions to change frequently.</p>
<h2>This blog</h2>
<p>Bragging time again. This site currently (at the time of writing) has a desktop PageSpeed score of 97/100. That&#39;s better than Facebook, Twitter, ebay etc and equal to Google&#39;s own score for Google.com. Yey for me.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Do We Need Designers for the Web?]]></title>
    <link href="http://ilee.co.uk/do-we-need-designers-for-the-web/"/>
    <id>http://ilee.co.uk/do-we-need-designers-for-the-web/</id>
    <published>2013-08-07T11:54:10.000Z</published>
    <updated>2013-08-07T13:40:44.000Z</updated>
    <content type="html"><![CDATA[<h2>The world is turning flat</h2>
<p>Print designers that design for the web are stepping close to the edge.</p>
<p><img src="/img/flat-world.png" alt="The world is flat"></p>
<h2>This blog</h2>
<p>I&#39;m not a designer (this is where anyone that has worked with me recently will try to wind me up). <strong>I&#39;m not a designer</strong>, but this blog looks OK, right? It&#39;s simple, no shadows, no gradients and no interface images (at all, the icons are a font). 99% of the time, that&#39;s what users want, something that&#39;s easy to use and understand. It loads quickly too, but that&#39;s a discussion for another day.</p>
<h2>The &quot;Flat UI&quot; / &quot;Metro&quot; era</h2>
<p>Companies and organisations have started to publish their own design guidelines and principles, with a very common theme. Less is more. Here are a few:</p>
<ul>
<li><p><a href="https://www.gov.uk/designprinciples">GOV UK design principles</a> makes it clear that they are be building simple and informative digital services, not websites.</p>
</li>
<li><p><a href="http://developer.windowsphone.com/en-us/design/principles">Windows Phone design principles</a> outlines their philosophy as clean, uncluttered screens that operate quickly.</p>
</li>
<li><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/TransitionGuide/index.html">iOS 7 UI Transition Guide</a> (Apple login required) emphasises that the UI should helps users understand and interact with the content and never compete with it.</p>
</li>
</ul>
<p>By now you&#39;ve probably realised I&#39;m not just talking about the web, I&#39;m talking about mobile apps too.</p>
<h2>But what about colours?</h2>
<p><strong>Science my friend</strong>. There are tons of colour scheme generators <a href="http://colorschemedesigner.com/">here</a> and <a href="https://kuler.adobe.com/create/color-wheel/">here</a>, if you&#39;re too lazy to <a href="http://lmgtfy.com/?q=colour+scheme+generators">Google it</a>. Or you can use the colour scheme from <a href="http://flatuicolors.com/">Flat UI</a>, which this blog uses. You don&#39;t need to worry about gradient colours or shadow colours and depth (sorry if that&#39;s the wrong terminology, <strong>I&#39;m not a designer</strong> remember).</p>
<h2>Good developers</h2>
<p>A good developer that&#39;s worth their salt should be able to source any required digital assets, generate a colour scheme and produce a series of quick prototypes. The prototype layouts should be iterated based on real user feedback, not from endless design meetings about what people might want something to look like, which produces pointless psds or pdfs.</p>
<h2>Where does this leave print designers?</h2>
<p>People still print brochures and leaflets (for some reason). Icon fonts and vector based images are even more important than ever and this is something that print designers should be comfortable in producing.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
    <category scheme="http://ilee.co.uk/tags/design/" term="design"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Static Site Generators]]></title>
    <link href="http://ilee.co.uk/static-site-generators/"/>
    <id>http://ilee.co.uk/static-site-generators/</id>
    <published>2013-08-06T16:15:06.000Z</published>
    <updated>2013-08-07T13:06:57.000Z</updated>
    <content type="html"><![CDATA[<h2>You may not have noticed but static HTML is taking back the web</h2>
<p>We all thought the days of static HTML websites were long gone when almighty server-side content management systems developed. With their powerful  architecture and databases, often requiring licence fees and a few dedicated GB of RAM on your web server, why wouldn&#39;t bigger be better? It turns out it&#39;s not.</p>
<h2><em>We</em> got it wrong</h2>
<ul>
<li>Static HTML files are fast, no need for in-memory caching.</li>
<li>Static HTML files are secure, there&#39;s much less to try to hack.</li>
<li>Static HTML files <strong>JUST WORK</strong> on virtually any hosting environment.</li>
</ul>
<p>OK, so what are we supposed to do, go back to coding like it&#39;s 1995? Managing common HTML between pages, sitemaps and &quot;last updated&quot; dates manually? Forgetting about new shiny technology like SASS and LESS, JADE and HAML? Not quite. </p>
<h2>Enter the Static Site Generator</h2>
<p>A Static Site Generator is a program which generates and outputs static HTML. The idea is that all the hard work is done upfront, so the user doesn&#39;t have to do the waiting. Think of it as <em>extreme caching</em> :)</p>
<p>Many generators already exist for personal sites, blogs and reference sites etc, and are available for pretty much every language/platform you can imagine. You don&#39;t have to use one off the shelf, they&#39;re pretty easy to put together (hence there being quite a few). It&#39;s also easy to get it working exactly how is best for you and your specific project.</p>
<p>I wrote a bespoke static site generator for a client earlier this year, which ingested a source atom feed and translated the data to HTML5 and RDFa using C# (wasn&#39;t my language of choice but I was constrained by internal politics, I was just happy to get the static site generator approved).</p>
<h2>This blog</h2>
<p>As a final point, this blog is static HTML. It&#39;s hosted for free on <a href="https://github.com/leecrossley/leecrossley.github.io">github</a> pages, with a custom domain name. I&#39;m writing markdown right now and using node.js to generate the HTML and CSS. Hopefully you didn&#39;t notice the page loading.</p>
]]></content>
    <category scheme="http://ilee.co.uk/tags/web/" term="web"/>
  </entry>
</feed>
